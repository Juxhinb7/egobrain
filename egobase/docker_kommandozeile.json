[
  {
    "title": "Docker auf Kommandozeile",
    "url": "https://hilfe.egocms.com/entwicklung/entwicklungsumgebung/docker/kommandozeile",
    "html": "Hilfeportal\nsearch\nKundenlogin\nlibrary_books\nVorwort\nlibrary_books\nInstallation\nlibrary_books\nAdministration\nlibrary_books\nRedaktion\nlibrary_books\nDesign\nlibrary_books\nEntwicklung\nlibrary_books\nEntwicklungsumgebung\nlibrary_books\nVersionsverwaltung\nlibrary_books\nDocker\nlibrary_books\nInstallation\nlibrary_books\nKommandozeile\nlibrary_books\nSMTP Mailserver\nlibrary_books\nDocker-Compose Umgebungen\nlibrary_books\nWorkstation\nlibrary_books\nIDE\nlibrary_books\nBrowser\nlibrary_books\nNeues Projekt\nlibrary_books\nTests\nlibrary_books\nSchnittstellen\nlibrary_books\nDie Verzeichnisstruktur\nlibrary_books\nDas Basisskript\nlibrary_books\nNeue Seitentypen erstellen\nlibrary_books\nWeiterführende Möglichkeiten\nlibrary_books\nTipps und Tricks\nlibrary_books\nKlassen & Funktionen\nlibrary_books\nBeispiele & Vorlagen\nlibrary_books\nAPI\nlibrary_books\nNavigation Flags\nlibrary_books\nJSON/REST API\nlibrary_books\nApp-Entwicklung\nlibrary_books\nSicheres Programmieren mit PHP\nlibrary_books\nTests\nlibrary_books\nSmarty\nlibrary_books\nTinyMCE\nlibrary_books\nModule\nlibrary_books\nAnhang\nlibrary_books\nBarrierefreiheit\nZuletzt geänderte Seiten\nDesign anpassen 09.01.2025\nAls Standard Suche einsetzen 09.01.2025\nErweiterte Einstellungen 24.12.2024\nTechnischer Ablauf 24.12.2024\nDocker 19.12.2024\nReiter Inhalt 18.12.2024\nRaumverwaltung 17.12.2024\nUrlaubsantrag 17.12.2024\nStartseite 17.12.2024\nChatbot 17.12.2024\nKI 17.12.2024\n{get_page} 03.12.2024\nSystemvoraussetzungen 13.11.2024\nLinux / Ubuntu 24.04 LTS 05.11.2024\nToolbar und Kontextmenü anpassen 28.10.2024\nWYSIWYG 28.10.2024\nBetriebsysteme 22.10.2024\nOracleDB 22.10.2024\nMySQL / MariaDB 22.10.2024\nDatenbanken 22.10.2024\nDocker auf Kommandozeile\nDocker Umgebung starten\n\nEin per Subversion ausgespieltes Projekt starten Sie mit folgendem Kommandozeilenaufruf.\n\ncd ~/workspace/PROJECTNAME/var/docker\ndocker-compose up -d\n\nHierbei werden alle Docker Container gestartet, die das Projekt benötigt, d.h.\n\nEGOCMS Webserver\nUbuntu\nRed Hat\nSuSE\nggf. ein Datenbankserver\nMySQL\nMariaDB\nMS SqlServer\nOracle DB\nein Dummy smtp Server (mailhog)\nggf. ein Indizierungsserver\negotec/elasticsearch:6 (privat, Freischaltung über EGOTEC Support)\ntomcat\nwildfly\nggf. Authentifizierungsserver\nSAML2\nLDAP\nActiveDirectory\n\nJe nach Projekt und Orginalinstalltion befinden sich der Datenbank- und Indizierungsserver im EGOCMS Webserver. \n\nWir stellen die docker-compose Umgebung immer so nah wie dem Produktivsystem des Projekts nach. D.h. wenn im Produktivsystem eine externe Oracle Datenbank angesteuert wird, dann wird es in der docker-compose Umgebung auch einen Oracle Container geben.\n\nFolgende Ports werden hierbei belegt:\n\nhttp über 80 und https über 443 für den EGOCMS Server\nhttp über 8025 für den Dummy SMTP Server\nggf. http über 10080 und https über 10443 für einen Liveserver\nggf. http über 20080 bis 60080 und https über 20443 bis 60443 für weitere Clusterserver\nggf. bei sehr großen Installationen http über 11080 bis 59080 und https über 11443 bis 59443 für noch mehr Clusterserver\nggf. werden auch mehrere Datenbank und Indizierungsserver gestartet\n\nBei größeren Projekten mit mehreren Clusterservern werden mindestens zwei docker-compose Umgebungen eingerichtet. Die erste Umgebung ist einfach aufgebaut, so dass die Templates schnell und Resourcensparend umgesetzt werden können. Die zweite Umgebung spiegelt dann die komplette Umgebung wider, so dass Integrationsstests durchgeführt werden können.\n\nwb_incandescent\nIm EGOCMS Docker Container ist immer das egocmsdev Paket aktiviert. D.h. das Debugging und Profiling kann über den Browser resp. die Url aktiviert werden.\nwb_incandescent\nDa direkt die lokalen Ports 80 und 443 auf der Workstation verwendet werden, darf auf der Workstation selbst kein Webserver laufen!\nBootstrap\n\nNach dem ersten Start laufen zwar der Webserver und PHP im Docker Container, das Projekt ist allerdings noch nicht initialisiert und EGOCMS ist nicht installiert. Es muss daher ein sogenannter Bootstrap durchgeführt werden.\n\n1\ndocker·exec·PROJEKTNAME·bash·/bootstrap.sh¶\n\nEs handelt sich hierbei um ein Bashskript, dass die vom Projekt verwendete EGOCMS Version herunterlädt und danach die in der Versionsverwaltung hinterlegte Datensicherung einspielt.\n\nArbeiten\n\nDie EGOCMS Installation ist nun sowohl über http://localhost \n\nals auch https://localhost erreichbar. Achtung: Das Zertifikat für localhost ist nicht sicher. Sie müssen dieses daher Ihrem Browser explizit erlauben. \n\nKurzanleitung weiterer Docker-Compose Befehle\n\nDie Befehle müssen immer im Hauptverzeichnis des Projekts ausgeführt werden.\n\ndocker-compose down\nDocker Container PROJEKTNAME anhalten. Dies kann mehrere Sekunden dauern. Beim Herunterfahren der Workstation geschieht dies automatisch.\ndocker exec -it egocms bash\nEine Kommandozeile im Docker Container öffnen.\ndocker ps\nAlle gerade laufenden Docker Container anzeigen.\ndocker ps --all\nAlle Docker Container anzeigen, auch solche, die aktuell gar nicht laufen.\ndocker rm PROJEKTNAME\nDocker Container löschen.\ndocker rmi IMAGENAME/IMAGEUUID\nDocker Image löschen.\ndocker pull egotec/server-cms:16.04\nEine aktuelle Version des Docker Images egotec/server-cms:16.04 herunterladen.\ndocker-compose pull\nAlle Images einer docker-compose Umgebung aktualisieren.\nwarning\nDa alle docker-compose Umgebungen mindestens die Ports 80, 443 und 8025 belegen, können nicht mehrere Projekte gleichzeitig gestartet werden.\nImpressum | Datenschutz"
  }
]